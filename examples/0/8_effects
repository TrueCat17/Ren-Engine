Эффекты.

Под эффектами в данном случае подразумеваются плавные переходы, появления/исчезновения и т. п.
Для их использования нужно просто указать нужный эффект после ключевого слова with, например:
	show np smile at left with dissolve
Использоваться они могут в командах scene, show и hide.

После текущей команды (в примере выше - show) управление перейдёт к следующей только после завершения эффекта.
Если надо выполнить эффект к нескольким спрайтам одновременно, то with нужно указать в отдельной строке после последней команды:
	show np normal at left as np1
	show np smile at right as np2
	with dissolve


По-умолчанию доступны следующие эффекты:
	fade, fade2, fade3 - плавный переход старой сцены в чёрный фон, затем оттуда - к новой, за 1, 2 и 3 сек. соответственно.
	flash, flash2, flash_red - тоже самое, но flash и flash2 используют белый цвет, а flash_red - красный.
	
	dspr, dissolve, dissolve2 - с помощью изменения прозрачности плавно заменяет старое изображение новым за 0.2, 1 и 2 сек. соответственно.
	
	vpunch, hpunch - трясут экран вертикально (v) и горизонтально (h) 0.5 сек.


Объявлены они таким образом:
	fade = Fade(0.5)
	fade2 = Fade(1)
	fade3 = Fade(1.5)
	
	flash = Fade(1, color="#FFF")
	flash2 = Fade(2, 2, 2, color="#FFF")
	flash_red = Fade(1, color="#E11")
	
	dspr = Dissolve(0.2)
	dissolve = Dissolve(0.5)
	dissolve2 = Dissolve(1)
	
	hpunch = Punch('xpos', 10, 0.1, 0.5)
	vpunch = Punch('ypos',  7, 0.1, 0.5)

Так что, если вам нужны те же самые эффекты, но с другими параметрами (например, с другим временем), то можете легко сделать аналогичные:
	Fade принимает такие параметры:
		out_time (время перехода к фоновому цвету),
		hold_time = 0 (время ожидания),
		in_time = None (время перехода от цвета к новой сцене),
		color = '000' (цвет)
	Dissolve:
		Просто время (в сек.)
	Punch:
		prop (изменяемое свойство),
		dist (амплитуда),
		time_one (время 1 периода),
		time_all (всё время).
		(Хотя в Ren'Py эти встряски реализованы иначе.)
Кстати, если эффект используется только один раз, то можно напрямую сделать так:
	show np normal with Dissolve(0.5)




Далее пойдёт детальное описание всей этой системы спрайтов-анимаций-эффектов.
Вам вряд ли это понадобится, если вы не собираетесь делать новые эффекты (совсем новые, а не fade4 = Fade(4.0)).
Хотя можете, разумеется, посмотреть, если интересно.
Но здесь творится настоящий ад.
Я вас предупреждал.


Итак, поехали!
(Далее идёт описание того, что происходит в файлах mods/inc/sprite*.rpy и mods/inc/screens/sprites.rpy, в последнем содержатся функции set_scene, show_sprite и hide_sprite, а так же происходит отрисовка изображений в окно игры с помощью ScreenLang.)

Есть такое понятие как спрайт (класс Sprite). Именно такими объектами оперируют команды scene, show и hide.
Его отличие от изображения (класс SpriteAnimationData) в том, что он может содержать в себе несколько изображений: новое (new_data) и старое (old_data).
Под старым понимаются такие изображения, которые были до вызова текущей команды, например:
	# Тут есть только новое (np normal), старое - пустое.
	show np normal with dissolve
	
	# А тут уже оба: новое (np smile) и старое (np normal).
	show np smile with dspr

Так вот, спрайты содержат в себе:
	Изображения (как минимум new_data и old_data, но любое может быть пустым):
		Список к отображению находится в свойстве data_list спрайта.
	Анимации (класс SpriteAnimation), 3 штуки (decl_at, at, show_at - порядок совпадает с предыдущей главой):
		Если сейчас происходит переход от 1 вида спрайта к другому, то будет 6 штук.
		Старые анимации содержатся в списке old_animations, новые - в new_animations.
	Эффект (мб и None, если он отсутствует).

Спрайты обновляются перед каждым кадром, при этом обновляются его анимации (в нужном порядке), эффект (если есть) и вложенные спрайты (в contains изображений, если есть).

Теперь чуть подробнее об обновлении анимаций.
Важный момент: анимации не содержат в себе изображений, других анимаций, свойств и т. п.
Анимации сохраняют всё в изображение new_data своего спрайта, т. е. все 3 анимации имеют общее "хранилице данных".
Это нужно для того, чтобы при изменении одного свойства из разных анимаций конечным значением стало то, которое было присвоено последним.

И наконец, изображения.
Каждое из них имеет:
	image - путь к файлу картинки,
	contains - список из "вложенных" спрайтов (почему спрайтов? Потому что нужны не анимации или хранилище данных, а всё вместе),
	ATL-свойства (xpos, alpha, вот это вот всё).


Вернёмся к спрайтам.
При вызове команды show есть 2 варианта развития событий:
	Спрайт с таким псевдонимом (1-е слово в имени) уже есть:
		Тогда новый спрайт получает в свойство old_data то, что у старого в new_data
	Если же его нет:
		То свойство old_data будет пустым
	Потом новый спрайт добавляется в нужное место в список sprites_list

При вызове hide ищется спрайт с указанным псевдонимом.
Если эффект не указан:
	Этот спрайт просто удаляется.
Если указан:
	Создаётся новый спрайт,
	Его new_data и new_animations остаются пустыми,
	А old_data и old_animations берутся из new_data и new_animations старого спрайта,
	И свойство hiding ставится в True (признак того, что спрайт исчезает).
	
	При очередном обновлении спрайта эффект завершается, вызывается remove_effect (удаление эффекта),
	И выясняется, что hiding == True, а значит - спрайт удаляется со сцены.


Отрисовка (несколько упрощённо):
Создаётся список для объектов, которые нужно будет отрисовать.
Проходимся по каждому спрайту (перед этим вызвав его обновление), в нём - по каждому изображению в data_list, у каждого изображения вызываем get_all_data.
Эта функция возвращает текущее изображение + все вложенные в contains с посчитанными параметрами относительно родительского изображения:
	Например, если есть изображение с xpos 100 и в него вложено ещё одно с xpos 50, то вернёт 2 изображения с xpos 100 и 150.
Полученные результаты добавляем в список.
После того, как всё добавили - отрисовываем.


Примеры реализации эффектов можно найти в mods/inc/sprites_effects.rpy.

